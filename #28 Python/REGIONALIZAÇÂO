# O código a seguir para criar um dataframe e remover as linhas duplicadas sempre é executado e age como um preâmbulo para o script: 

# dataset = pandas.DataFrame(Regiao, Tipo Regiao, Aliado ID, Nome Aliado, Latitude, Longitude)
# dataset = dataset.drop_duplicates()

# Cole ou digite aqui seu código de script:
import pandas as pd
import numpy as np
from math import radians, sin, cos, sqrt, atan2
import matplotlib.pyplot as plt
import geopandas as gpd
from shapely.geometry import LineString

# O dataset é automaticamente criado pelo Power BI
dataset = dataset.drop_duplicates()

# Exemplo de associação de coordenadas (latitude e longitude) para cada região
coord_map = {
    'Metropolitana': {'Latitude': -23.5505, 'Longitude': -46.6333},
    'Interior': {'Latitude': -20.3155, 'Longitude': -40.3128}
}

# Adicionar colunas de latitude e longitude ao dataframe
dataset['Latitude'] = dataset['Tipo Regiao'].map(lambda x: coord_map.get(x, {'Latitude': np.nan})['Latitude'])
dataset['Longitude'] = dataset['Tipo Regiao'].map(lambda x: coord_map.get(x, {'Longitude': np.nan})['Longitude'])

# Função para calcular a distância usando a fórmula de Haversine
def haversine(lon1, lat1, lon2, lat2):
    R = 6371  # Raio da Terra em km
    dlon = radians(lon2 - lon1)
    dlat = radians(lat2 - lat1)
    a = sin(dlat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return R * c

# Calcular a distância entre todos os pontos
distances = []
for i, row1 in dataset.iterrows():
    for j, row2 in dataset.iterrows():
        if i < j:  # Evitar duplicações
            distance = haversine(row1['Longitude'], row1['Latitude'], row2['Longitude'], row2['Latitude'])
            distances.append({'Point1': i, 'Point2': j, 'Distance': distance})

dist_df = pd.DataFrame(distances)

# Identificar os aliados mais próximos
min_distance = dist_df['Distance'].min()
closest_points = dist_df[dist_df['Distance'] == min_distance]

# Criar o GeoDataFrame
gdf = gpd.GeoDataFrame(dataset, geometry=gpd.points_from_xy(dataset.Longitude, dataset.Latitude))

# Criar a linha entre os aliados mais próximos
lines = []
for _, row in closest_points.iterrows():
    point1 = gdf.iloc[int(row['Point1'])].geometry
    point2 = gdf.iloc[int(row['Point2'])].geometry
    line = LineString([point1, point2])
    lines.append(line)

gdf_lines = gpd.GeoDataFrame(geometry=lines)

# Plotar o mapa com as linhas
fig, ax = plt.subplots(figsize=(10, 10))
gdf.plot(ax=ax, color='blue', markersize=50)
gdf_lines.plot(ax=ax, color='red')
plt.show()